ToDo:

- Alle Kapitel schreiben
- Alle Kapitel überarbeiten
- Überarbeiten von Performance in Variante D
- Erwähenen der Zwei Varianten von mit flag und ohne flag
    - Ohne flag muss trotzdem abgespeichert werden aus rechtlichen gründen.
- Alle Klassennamen in \emph aber als eigener Befehl z.B. \name{}
- Erklären warum nicht Basketitems getrennt worden sind.
- Rename "doumentbased" zu dokumentenorientierten Datenbank
- Schreiben bei D => More database requests -> More Safety (Add to disclaimer in perfromance test too)
- \subsubsection statt textbf
- %TODO: ,da erstezten durch andere Wörte in der ganzen Bachelorarbeit
- Mehr variationen von ,da jedoch wohingegen dass weshalb etc.
%TODO: Schreibweise von Sourcecode in der ganzen BA überprüfen. Sourcecode oder Source code

- Sqeuenzdiagram asynchrone Pfeilspitzen überarbeiten
- Pseudocode Zeilen prüfen ob noch passend Schluss von 60 prüfen
- Glossary überarbeiten. REST erklären etc.
- Aktivitätsdiagramm schreiben statt Swimlane (Erwähnen der Syntax und Ersetzen der Wörter für "Swimlane")
- README in Github Repo (Describe Calculation)


- Sehr oft "model" bzw "Datenmodell"
- calculateWithoutSaving should be named more correctly
- Check REST API Dokumentation in Software (write for variant-d and add metrics)

Today:
- Aggregationsschnitte oder Aggregatsschnite?
- Quellen in Glossary? JA ; Gleicher Satzbau oder unterschiedlich?
- Kapitel 30: Erst Diagramm oder erst Beschreibung? EGAL ; Legende von Nöte für das Swimlane?  Beim ersten mal legende (ANHANG) Machen als BPMN oder Aktivitätsdiagramm
- Soll ich Domäne schreiben oder nur Domain
- Ubiquitous Language so darstellen? Gleicher Schreibstil mit Wortwiederholungen? Vollständige Sätze
- Same with Domain-Modell (IdentifiedCustomer)
- Compension wie GRAPHQL etc.
- Fazit schluss ziehen auf Einleitung

- Empfehlungen Fazit; mitnehmen für andere

Stefano:
- Ein Request => Mehrere Transaktions?
- Eventual consistency. Wie schütze ich die erste Entität vor Änderungen bevor die zweite Änderung stattfindet.
- POC Source Code besprechen
- Mehr Infos zum Checkout-Team?
- Wie weit erklären, dass Checkout-Software exisitert? 30_Planung
- Weitere Wörter für die Ubiquitous Language
- ResponseDTO? Autogenerated? Or just like that?
- Vat Sign == Tax Key, bedeutung?
- Marketplace?
- Is ClientContext automatically set by spring? (ClientContextServletRequestFactory)
- Software nur für MMS?

Apel:
- Wie weit erklären, dass Checkout-Software exisitert? 30_Planung ?
- Zitierungsstil? Konkrete Zeilen etc.
- Titel und Stil der Aufzählungen, passt so? Oder eher versuchen unterschiedlich zu machen?

Allgemein:
- Hibernate, Optimisstic Changes, Version Number, do you need implementation for that?
- REAL Problem behind too big / too small aggregates? 
( - Entity != New Table in DB. But why here it says otherwise: https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_1.pdf Seite 5 Middle Left )
- Muss Basket immer sich selber konstant halten?
    Beispiel: Überprüfen auf MaxAmount per same Product: Macht DomainService und bei erfolg basket.addItem()
    Aber dann kann Basket.addItem aufgerufen werden ohne diese überprüfung -> BUGANFÄLLIG..
    Pass DomainService to Basket?
( - Entities behalten immer ihre Identität, während Value Objects sie durch erstellen neuer Objecte ändern können )

Todo:
- Überlegung was ist Entity und was ist ValueObject
- Hexagonale Architektur Diagramm von POC korrigieren
- Überschriften anpassen und verschönern
- Calculation Result update only when needed or while update items as use case and aggregate design
- Context Map kommunikation zwischen Bounded Contexts
- Umfeldanalyse mit Systemen, Datenbank, Kotlin
- Anwendungsfälle

- Source Code Documentation
https://microservices.io/patterns/data/saga.html
https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_1.pdf
https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_2.pdf
https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_3.pdf
- Liste von hohen Wortwiederholungen erstellen und suchen


- Bewertungsarten wie Aggregate bewerten werden
- Interpretationskapitel zwischen 6. und 7.
- Vorgehen für die Bewertung der Architekturen
- Transferierbarkeit der Ergebnisse im Fazit
- Parameter

Eig: 80 / 200 / 250   Now: 50/60/60

A: fetchProduct: 3, fetchPrice: 3, fetchShippingCosts: 2, createPaymentProcess: 1, initializeAllSubPayments: 1, executePayment: 1, createOrder: 1
D: fetchProduct: 3, fetchPrice: 3, fetchShippingCosts: 2, createPaymentProcess: 1, initializeAllSubPayments: 1, executePayment: 1, createOrder: 1
D no flag: fetchProduct: 3, fetchPrice: 3, fetchShippingCosts: 2, createPaymentProcess: 1, initializeAllSubPayments: 1, executePayment: 1, createOrder: 1

fetchProduct: 3, fetchPrice: 3, fetchShippingCosts: 1, createPaymentProcess: 1, initializeAllSubPayments: 1, executePayment: 1, createOrder: 1