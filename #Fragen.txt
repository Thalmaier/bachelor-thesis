Prio:

Stefano:
- https://docs.mongodb.com/manual/core/write-operations-atomicity/  MEANING?
- Ein Request => Mehrere Transaktions?
- Eventual consistency. Wie schütze ich die erste Entität vor Änderungen bevor die zweite Änderung stattfindet.
- Macht Sinn dass BasketItem Immutable ist?
- PriceAdjustment als Use-Case?
- POC Source Code besprechen
- Mehr Infos zum Checkout-Team?
- Wie weit erklären, dass Checkout-Software exisitert? 30_Planung
- Weitere Wörter für die Ubiquitous Language
- ResponseDTO? Autogenerated? Or just like that?
- Vat Sign == Tax Key, bedeutung?
- Marketplace?
- Is ClientContext automatically set by spring? (ClientContextServletRequestFactory)
- Software nur für MMS?

Apel:
- Wie weit erklären, dass Checkout-Software exisitert? 30_Planung ?
- Wie darstellen? Wie Satzbau? Wortwiederholungen? Zum Beispiel Ubiquitous Language
- Zitierungsstil? Konkrete Zeilen etc.
- Titel und Stil der Aufzählungen, passt so? Oder eher versuchen unterschiedlich zu machen?

Allgemein:
- Hibernate, Optimisstic Changes, Version Number, do you need implementation for that?
- REAL Problem behind too big / too small aggregates? 
( - Entity != New Table in DB. But why here it says otherwise: https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_1.pdf Seite 5 Middle Left )
- Muss Basket immer sich selber konstant halten?
    Beispiel: Überprüfen auf MaxAmount per same Product: Macht DomainService und bei erfolg basket.addItem()
    Aber dann kann Basket.addItem aufgerufen werden ohne diese überprüfung -> BUGANFÄLLIG..
    Pass DomainService to Basket?
( - Entities behalten immer ihre Identität, während Value Objects sie durch erstellen neuer Objecte ändern können )

Todo:
- Überlegung was ist Entity und was ist ValueObject
- Hexagonale Architektur Diagramm von POC korrigieren
- Überschriften anpassen und verschönern
- Zeigen des Bestellprozesses anhand von MediamarktSaturn
- Calculation Result update only when needed or while update items as use case and aggregate design
- Context Map kommunikation zwischen Bounded Contexts
- Umfeldanalyse mit Systemen, Datenbank, Kotlin
- Anwendungsfälle
- README in Github Repo (Describe Calculation)
- Source Code Documentation
https://microservices.io/patterns/data/saga.html
https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_1.pdf
https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_2.pdf
https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_3.pdf
- Liste von hohen Wortwiederholungen erstellen und suchen


- Bewertungsarten wie Aggregate bewerten werden
- Interpretationskapitel zwischen 6. und 7.
- Vorgehen für die Bewertung der Architekturen
- Transferierbarkeit der Ergebnisse im Fazit
- Parameter


Vorgehen:
- Aggregate erstellen und Referenzen löschen
- Alle Funktionen die in Basket nun nicht mehr funktionieren -> DomainService
- Create Repos for all aggregates
- Problem Aggregate könnte änderungen durchgehen, die nicht erlaubt sind
    - ODER: Passing basketDataRepo or injecting it
- Two Version, always calculate or only if needed (with flag?)
    - need so set flag when chaning item quantity, or fulfillment or shipping address
    - need flag when basket item shipping needs update
- TODO: When is all data needed -> Implement
- Waay harder for client
- Problem mit circualr dependencies
